{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dashboardName": {
      "type": "string",
      "maxLength": 25,
      "metadata": {
        "description": "A short identifier to distinguish machines in this membership"
      }
    },
    "username": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "ssh public key for connecting to VMs."
      }
    },
    "dashboardSecret": {
      "type": "securestring",
      "metadata": {
        "description": "A unique string to used to ensure only machines with the secret can post to the dashboard"
      }
    },
    "vmSku": {
      "defaultValue": "Standard_DS1_v2",
      "type": "string"
    },
    "dockerImage" :{
      "defaultValue": "ethereumex/eth-stats-dashboard:latest",
      "type": "string",
      "metadata": {
        "description": "The tag of the docker image to download"
      }
    },
    "contentVersion": {
      "defaultValue": "Release-v0.9.6",
      "type": "string",
      "metadata": {
        "description": "The version of the templates to use. This refers to a git branch. This parameter is ignored if contentRootOverride is provided"
      }
    },
    "contentRootOverride": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Url location of root templates"
      }
    },
    "locationOverride": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location to deploy resources. By default the template will use the Resource Group location"
      }
    }
  },
  "variables": {
    "contentRootUrl" : "[concat('https://raw.githubusercontent.com/EthereumEx/ethereum-arm-templates/', parameters('contentVersion'), '/ethereum-consortium')]",
    "contentRoots" : [
      "[variables('contentRootUrl')]",
      "[parameters('contentRootOverride')]"
    ],
    "contentRoot": "[variables('contentRoots')[length(take(parameters('contentRootOverride'),1))]]",
    "resourceLocations": [
      "[resourceGroup().location]",
      "[parameters('locationOverride')]"
    ],
    "resourceLocation": "[tolower(variables('resourceLocations')[length(take(parameters('locationOverride'),1))])]",
    "deploymentId": "[toLower(substring(uniqueString(concat(resourceGroup().Id, variables('resourceLocation'))), 0, 10))]",
    "storageAccountType": "Premium_LRS",
    "saCount": 5,
    "namingInfix": "[toLower(parameters('dashboardName'))]",
    "storageAccounts": [
      "[concat('savmss', variables('deploymentId'), '01')]",
      "[concat('savmss', variables('deploymentId'), '02')]",
      "[concat('savmss', variables('deploymentId'), '03')]",
      "[concat('savmss', variables('deploymentId'), '04')]",
      "[concat('savmss', variables('deploymentId'), '05')]"
    ],
    "dNetworkName": "[concat('Consortium.', parameters('dashboardName'), '.Network')]",
    "dVMSSDashboard": "[concat('Consortium.', parameters('dashboardName'), '.VMSSCommands')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccounts')[copyIndex()]]",
      "apiVersion": "2015-06-15",
      "location": "[variables('resourceLocation')]",
      "copy": {
        "name": "storageLoop",
        "count": "[variables('saCount')]"
      },
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('dNetworkName')]",
      "apiVersion": "2015-01-01",
      "properties": {
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(variables('contentRoot'), '/template.dashboard.network.json')]"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('resourceLocation')]"
          },
          "namingInfix": {
            "value": "[variables('namingInfix')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('dVMSSDashboard')]",
      "apiVersion": "2015-01-01",
      "properties": {
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(variables('contentRoot'), '/utilityTemplates/template.vmss.commands.json')]"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('resourceLocation')]"
          },
          "contentRoot" :{
            "value" : "[variables('contentRoot')]"
          },
          "vmssName": {
            "value": "[concat(variables('namingInfix'), '-n')]"
          },
          "vmSku": {
            "value": "[parameters('vmSku')]"
          },
          "image": {
            "value": "Ubuntu16.04.0-LTS"
          },
          "instanceCount": {
            "value": 1
          },
          "storageAccounts": {
            "value": "[variables('storageAccounts')]"
          },
          "virtualNetworkName": {
            "value": "[reference(variables('dNetworkName')).outputs.network.value.name]"
          },
          "username": {
            "value": "[parameters('username')]"
          },
          "sshPublicKey": {
            "value": "[parameters('sshPublicKey')]"
          },
          "commandsJson" : {
            "value" : {
              "Commands" : [
                {
                    "name" : "dashboard",
                    "image" : "[parameters('dockerImage')]",
                    "ports" : [
                        { "port" : 3000, "protocol" : "tcp" },
                        { "port" : 3001, "protocol" : "tcp" }
                    ],
                    "environment" :{
                        "WS_SECRET" : "[parameters('dashboardSecret')]"
                    },
                    "arguments" : [
                      "-td --restart always",
                      "--hostname ${HOST_NAME}-d"
                    ]
                }
              ]
            }
          },
          "networkConfiguration": {
            "value": {
              "subnet": {
                "id": "[reference(variables('dNetworkName')).outputs.network.value.subnets.dashboard]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[reference(variables('dNetworkName')).outputs.network.value.internal.poolId]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "storageLoop",
        "[variables('dNetworkName')]"
      ]
    }
  ],
  "outputs": {
    "ip": {
      "type": "string",
      "value": "[reference(variables('dNetworkName')).outputs.network.value.ip.ipAddress]"
    }
  }
}